################################################################################
##                                                                            ##
## Generates an abstract tree builder.                                        ##
## An instance of this class is a visitor for GelExpressions. It takes any    ##
## GelExpression concrete tree and returns the matching abstract tree.        ##
##                                                                            ##
################################################################################
package fr.insset.jeanluc.ete.gel.impl;


import fr.insset.jeanluc.ete.api.EteException;
import fr.insset.jeanluc.gel.GelParser;
import fr.insset.jeanluc.gel.GelParserBaseVisitor;
import fr.insset.jeanluc.gel.api.GelExpression;
import fr.insset.jeanluc.util.factory.FactoryRegistry;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.antlr.v4.runtime.ParserRuleContext;




public class TreeBuilder extends GelParserBaseVisitor<GelExpression> {


    protected GelExpression buildBinaryExpression(ParserRuleContext ctx) throws EteException {
        int     childCount = ctx.getChildCount();
        GelExpression   result = ctx.getChild(0).accept(this);
        // run through the operands
        for (int i=2 ; i<childCount ; i+=2) {
            GelExpression   child   = ctx.getChild(i).accept(this);
            String          operator = ctx.getChild(i-1).getText();
            GelExpression   exp;
            try {
                exp = (GelExpression)FactoryRegistry.newInstance(operator);
            } catch (InstantiationException ex) {
                Logger.getLogger(TreeBuilder.class.getName()).log(Level.SEVERE, null, ex);
                throw new EteException(ex);
            }
            exp.addOperand(result);
            exp.addOperand(child);
            result = exp;
            // TODO : manage type
        }
        return result;
    }


    //========================================================================//


#foreach ($aClass in $current.classes)
    #if (${aClass.abstract})
    #else
public GelExpression visit${aClass.name}ExpressionCS(GelParser.${aClass.name}ExpressionContext ctx) throws EteException {
        return buildBinaryExpression(ctx);
    }
    #end
#end


}

